{"version":3,"file":"static/js/327.32039a86.chunk.js","mappings":"mTAOAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAECC,EAAmB,mCAAG,oGACVF,EAAAA,EAAAA,IAAA,sCAAyCC,IAD/B,cAC3BE,EAD2B,yBAE1BA,EAASC,KAAKC,SAFY,2CAAH,qDAKnBC,EAAiB,mCAAG,WAAOC,GAAP,uFACRP,EAAAA,EAAAA,IAAA,gCACIC,EADJ,kBACiBM,IAFT,cACzBJ,EADyB,yBAIxBA,EAASC,KAAKC,SAJU,2CAAH,sDAOjBG,EAAiB,mCAAG,WAC/BC,GAD+B,uFAGRT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,oBAAuCR,IAH/B,cAGzBE,EAHyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBM,EAAc,mCAAG,WAAOD,GAAP,uFACLT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,4BAA+CR,IAD1C,cACtBE,EADsB,yBAErBA,EAASC,KAAKO,MAFO,2CAAH,sDAKdC,EAAiB,mCAAG,WAC/BH,GAD+B,uFAGRT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,4BAA+CR,IAHvC,cAGzBE,EAHyB,yBAIxBA,EAASC,KAAKC,SAJU,2CAAH,qD,gFChCjBQ,E,QAAaC,GAAAA,IAAH,gE,SCCVC,EAAmB,WAC9B,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,OAAQ,GACRC,MAAO,GACPC,MAAM,UACNC,aAAc,CAAC,EACfC,SAAS,EACTC,UAAU,eACVC,eAAe,UACfC,YAAa,EACbC,qBAAsB,KAI7B,C,kHCjBYC,EAAYX,EAAAA,GAAAA,GAAH,gPAWTY,EAAaZ,EAAAA,GAAAA,IAAH,8HAQVa,EAAab,EAAAA,GAAAA,EAAH,oH,SCVVc,EAA8B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACtCC,GAAqBC,EAAAA,EAAAA,MACnBC,EAAiCH,EAAjCG,MAAOzB,EAA0BsB,EAA1BtB,KAAM0B,EAAoBJ,EAApBI,GAAIC,EAAgBL,EAAhBK,YAEzB,OACE,SAACT,EAAD,WACE,UAAC,KAAD,CAASU,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA7C,WACE,SAACJ,EAAD,CACEY,IACEJ,EAAW,0CAC4BA,GACnC,0EAENK,IAAKP,GAASzB,KAEhB,SAACoB,EAAD,UAAaK,GAASzB,QAI7B,EC5BYiC,EAAS1B,EAAAA,GAAAA,GAAH,sGCON2B,EAA8B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC5C,OACE,SAACF,EAAD,UACGE,EAAOC,KAAI,SAAAd,GAAK,OACf,SAACD,EAAD,CAA0BC,MAAOA,GAAjBA,EAAMI,GADP,KAKtB,C,iKCfYW,E,QAAQ9B,GAAAA,GAAH,iI,mBCoClB,EA7BuB,WACrB,OAA4B+B,EAAAA,EAAAA,UAAmB,IAA/C,eAAOH,EAAP,KAAeI,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAkB,GAApD,eAAOE,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEID,GAAa,GAFjB,UAGuB9C,EAAAA,EAAAA,MAHvB,OAGUE,EAHV,OAII0C,EAAU1C,GAJd,gDAMI8C,QAAQC,IAAR,MANJ,yBAQIH,GAAa,GARjB,6EADc,uBAAC,WAAD,wBAadI,EACD,GAAE,KAGD,UAACC,EAAA,EAAD,CAAKpC,MAAM,SAASqC,EAAE,SAASC,EAAE,YAAjC,WACE,SAACX,EAAD,6BACCG,IAAa,SAAChC,EAAA,EAAD,KACd,SAAC0B,EAAA,EAAD,CAAWC,OAAQA,MAGxB,C","sources":["api.tsx","components/Loader/Loader.styled.ts","components/Loader/Loader.tsx","components/MovieItem/MovieItem.styled.ts","components/MovieItem/MovieItem.tsx","components/MovieList/MovieList.styled.ts","components/MovieList/MovieList.tsx","pages/Home/Home.styled.ts","pages/Home/Home.tsx"],"sourcesContent":["import axios from 'axios';\n\nimport { IMovie } from './types/movieType';\nimport { IMovieDetails } from './types/movieDetailsType';\nimport { ICast } from './types/movieCastType';\nimport { IReview } from './types/movieReviewType';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = '2b7f816e736d5b5ccbfcea974c6e28fa';\n\nexport const fetchTrendingMovies = async (): Promise<IMovie[]> => {\n  const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  return response.data.results;\n};\n\nexport const fetchMoviesByName = async (name: string): Promise<IMovie[]> => {\n  const response = await axios.get(\n    `/search/movie?api_key=${KEY}&query=${name}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async (\n  movieId: string\n): Promise<IMovieDetails> => {\n  const response = await axios.get(`/movie/${movieId}?api_key=${KEY}`);\n  return response.data;\n};\n\nexport const fetchMovieCast = async (movieId: string): Promise<ICast[]> => {\n  const response = await axios.get(`/movie/${movieId}/credits?api_key=${KEY}`);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async (\n  movieId: string\n): Promise<IReview[]> => {\n  const response = await axios.get(`/movie/${movieId}/reviews?api_key=${KEY}`);\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const LoaderWrap = styled.div`\n  width: 60px;\n  margin: 0 auto 20px;\n`;\n","import { Oval } from 'react-loader-spinner';\nimport { LoaderWrap } from './Loader.styled';\n\nexport const Loader: React.FC = () => {\n  return (\n    <LoaderWrap>\n      <Oval\n        height={60}\n        width={60}\n        color=\"#008080\"\n        wrapperStyle={{}}\n        visible={true}\n        ariaLabel=\"oval-loading\"\n        secondaryColor=\"#a6d3d3\"\n        strokeWidth={5}\n        strokeWidthSecondary={5}\n      />\n    </LoaderWrap>\n  );\n};\n","import styled from 'styled-components';\n\nexport const MovieCard = styled.li`\n  width: calc((1248px - 32px) / 3);\n  border-radius: 4px;\n  transition: transform 250ms linear, box-shadow 250ms linear;\n\n  &:hover {\n    transform: scale(1.05);\n    box-shadow: 0px 0px 12px 4px #198d8d;\n  }\n`;\n\nexport const MovieImage = styled.img`\n  width: 100%;\n  height: 574px;\n  border-radius: 4px;\n  margin-bottom: 6px;\n  object-fit: cover;\n`;\n\nexport const MovieTitle = styled.p`\n  font-size: 22px;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-left: 3px;\n`;\n","import { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { MovieCard, MovieImage, MovieTitle } from './MovieItem.styled';\nimport { IMovie } from '../../types/movieType';\n\nimport { Location } from 'history';\n\ninterface IProps {\n  movie: IMovie;\n}\n\nexport const MovieItem: React.FC<IProps> = ({ movie }) => {\n  const location: Location = useLocation();\n  const { title, name, id, poster_path } = movie;\n\n  return (\n    <MovieCard>\n      <NavLink to={`/movies/${id}`} state={{ from: location }}>\n        <MovieImage\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n              : 'https://www.ena.org/UCommerce/Css/Sitefinity/images/image-not-found.png'\n          }\n          alt={title || name}\n        />\n        <MovieTitle>{title || name}</MovieTitle>\n      </NavLink>\n    </MovieCard>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Movies = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 32px 16px;\n  margin: 0px auto;\n`;\n","import React from 'react';\nimport { MovieItem } from '../MovieItem/MovieItem';\nimport { Movies } from './MovieList.styled';\nimport { IMovie } from '../../types/movieType';\n\ninterface IProps {\n  movies: IMovie[];\n}\n\nexport const MovieList: React.FC<IProps> = ({ movies }) => {\n  return (\n    <Movies>\n      {movies.map(movie => (\n        <MovieItem key={movie.id} movie={movie} />\n      ))}\n    </Movies>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  text-align: center;\n  font-size: 32px;\n  text-shadow: 2px 2px 20px #198d8d;\n  margin-bottom: 20px;\n`;\n","import { useState, useEffect } from 'react';\nimport { fetchTrendingMovies } from '../../api';\nimport { MovieList } from '../../components/MovieList/MovieList';\nimport { Loader } from '../../components/Loader/Loader';\nimport { Title } from './Home.styled';\nimport { Box } from '../../Box';\n\nimport { IMovie } from '../../types/movieType';\n\nconst Home: React.FC = () => {\n  const [movies, setMovies] = useState<IMovie[]>([]);\n  const [isLoading, setIsloading] = useState<boolean>(false);\n\n  useEffect(() => {\n    async function fetchMovies() {\n      try {\n        setIsloading(true);\n        const data = await fetchTrendingMovies();\n        setMovies(data);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsloading(false);\n      }\n    }\n\n    fetchMovies();\n  }, []);\n\n  return (\n    <Box width=\"1280px\" m=\"0 auto\" p=\"20px 16px\">\n      <Title>Trenting today</Title>\n      {isLoading && <Loader />}\n      <MovieList movies={movies} />\n    </Box>\n  );\n};\n\nexport default Home;\n"],"names":["axios","KEY","fetchTrendingMovies","response","data","results","fetchMoviesByName","name","fetchMovieDetails","movieId","fetchMovieCast","cast","fetchMovieReviews","LoaderWrap","styled","Loader","height","width","color","wrapperStyle","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","MovieCard","MovieImage","MovieTitle","MovieItem","movie","location","useLocation","title","id","poster_path","to","state","from","src","alt","Movies","MovieList","movies","map","Title","useState","setMovies","isLoading","setIsloading","useEffect","console","log","fetchMovies","Box","m","p"],"sourceRoot":""}