{"version":3,"file":"static/js/643.8eabb8c0.chunk.js","mappings":"mTAIAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAECC,EAAmB,mCAAG,oGACVF,EAAAA,EAAAA,IAAA,sCAAyCC,IAD/B,cAC3BE,EAD2B,yBAE1BA,EAASC,KAAKC,SAFY,2CAAH,qDAKnBC,EAAiB,mCAAG,WAAOC,GAAP,uFACRP,EAAAA,EAAAA,IAAA,gCACIC,EADJ,kBACiBM,IAFT,cACzBJ,EADyB,yBAIxBA,EAASC,KAAKC,SAJU,2CAAH,sDAOjBG,EAAiB,mCAAG,WAAOC,GAAP,uFACRT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,oBAAuCR,IAD/B,cACzBE,EADyB,yBAExBA,EAASC,MAFe,2CAAH,sDAKjBM,EAAc,mCAAG,WAAOD,GAAP,uFACLT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,4BAA+CR,IAD1C,cACtBE,EADsB,yBAErBA,EAASC,KAAKO,MAFO,2CAAH,sDAKdC,EAAiB,mCAAG,WAAOH,GAAP,uFACRT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,4BAA+CR,IADvC,cACzBE,EADyB,yBAExBA,EAASC,KAAKC,SAFU,2CAAH,qD,qLC3BjBQ,EAAWC,EAAAA,GAAAA,GAAH,iFAMRC,EAAWD,EAAAA,GAAAA,GAAH,6DAIRE,EAAQF,EAAAA,GAAAA,IAAH,8HAQLG,EAAWH,EAAAA,GAAAA,EAAH,wFAMRI,EAAYJ,EAAAA,GAAAA,EAAH,4CAITK,EAAWL,EAAAA,GAAAA,EAAH,6D,SCoCrB,EAnDuB,WACrB,IAAQL,GAAYW,EAAAA,EAAAA,MAAZX,QACR,GAAwBY,EAAAA,EAAAA,UAAkB,IAA1C,eAAOV,EAAP,KAAaW,EAAb,KACA,GAAkCD,EAAAA,EAAAA,WAAkB,GAApD,eAAOE,EAAP,KAAkBC,EAAlB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,gGAEID,GAAa,IACTf,EAHR,iCAIyBC,EAAAA,EAAAA,IAAeD,GAJxC,OAIYL,EAJZ,OAKMkB,EAAQlB,GALd,uDAQIsB,QAAQC,IAAR,MARJ,yBAUIH,GAAa,GAVjB,6EADc,uBAAC,WAAD,wBAedI,EACD,GAAE,CAACnB,KAGF,gCACGc,IAAa,SAACM,EAAA,EAAD,IACblB,EAAKmB,OAAS,IACb,SAACjB,EAAD,UACGF,EAAKoB,KAAI,gBAAGxB,EAAH,EAAGA,KAAMyB,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,GAAlC,OACR,UAACnB,EAAD,YACE,SAACC,EAAD,CACEmB,IACEF,EAAY,0CAC2BA,GACnC,uEAENG,IAAK7B,KAEP,SAACU,EAAD,UAAWV,KACX,SAACW,EAAD,UAAYc,MAVCE,EADP,MAgBG,IAAhBvB,EAAKmB,SAAiBP,IACrB,SAACJ,EAAD,kCAIP,C,gFC9DYkB,E,QAAavB,GAAAA,IAAH,gE,SCCVe,EAAmB,WAC9B,OACE,SAACQ,EAAD,WACE,SAAC,KAAD,CACEC,OAAQ,GACRC,MAAO,GACPC,MAAM,UACNC,aAAc,CAAC,EACfC,SAAS,EACTC,UAAU,eACVC,eAAe,UACfC,YAAa,EACbC,qBAAsB,KAI7B,C","sources":["api.tsx","components/Cast/Cast.styled.ts","components/Cast/Cast.tsx","components/Loader/Loader.styled.ts","components/Loader/Loader.tsx"],"sourcesContent":["import axios from 'axios';\n\n// import { IMovie } from './types/movieType';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = '2b7f816e736d5b5ccbfcea974c6e28fa';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  return response.data.results;\n};\n\nexport const fetchMoviesByName = async (name: string) => {\n  const response = await axios.get(\n    `/search/movie?api_key=${KEY}&query=${name}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async (movieId: string) => {\n  const response = await axios.get(`/movie/${movieId}?api_key=${KEY}`);\n  return response.data;\n};\n\nexport const fetchMovieCast = async (movieId: string) => {\n  const response = await axios.get(`/movie/${movieId}/credits?api_key=${KEY}`);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async (movieId: string) => {\n  const response = await axios.get(`/movie/${movieId}/reviews?api_key=${KEY}`);\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px 16px;\n`;\n\nexport const CastItem = styled.li`\n  width: calc((1248px - 96px) / 7);\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n  border-radius: 8px;\n  margin-bottom: 4px;\n`;\n\nexport const CastName = styled.p`\n  font-size: 18px;\n  font-weight: 600;\n  margin-bottom: 6px;\n`;\n\nexport const Character = styled.p`\n  font-size: 18px;\n`;\n\nexport const NotFound = styled.p`\n  font-size: 24px;\n  color: brown;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieCast } from '../../api';\nimport { Loader } from '../../components/Loader/Loader';\nimport {\n  CastList,\n  CastItem,\n  Image,\n  CastName,\n  Character,\n  NotFound,\n} from './Cast.styled';\n\nimport { ICast } from '../../types/movieCastType';\n\nconst Cast: React.FC = () => {\n  const { movieId } = useParams<string>();\n  const [cast, setCast] = useState<ICast[]>([]);\n  const [isLoading, setIsloading] = useState<Boolean>(false);\n\n  useEffect(() => {\n    async function fetchMovieCastList() {\n      try {\n        setIsloading(true);\n        if (movieId) {\n          const data = await fetchMovieCast(movieId);\n          setCast(data);\n        }\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsloading(false);\n      }\n    }\n\n    fetchMovieCastList();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {cast.length > 1 && (\n        <CastList>\n          {cast.map(({ name, character, profile_path, id }) => (\n            <CastItem key={id}>\n              <Image\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                    : 'https://cdn.pixabay.com/photo/2017/11/10/05/48/user-2935527_1280.png'\n                }\n                alt={name}\n              />\n              <CastName>{name}</CastName>\n              <Character>{character}</Character>\n            </CastItem>\n          ))}\n        </CastList>\n      )}\n      {cast.length === 0 && !isLoading && (\n        <NotFound>Cast is not found</NotFound>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const LoaderWrap = styled.div`\n  width: 60px;\n  margin: 0 auto 20px;\n`;\n","import { Oval } from 'react-loader-spinner';\nimport { LoaderWrap } from './Loader.styled';\n\nexport const Loader: React.FC = () => {\n  return (\n    <LoaderWrap>\n      <Oval\n        height={60}\n        width={60}\n        color=\"#008080\"\n        wrapperStyle={{}}\n        visible={true}\n        ariaLabel=\"oval-loading\"\n        secondaryColor=\"#a6d3d3\"\n        strokeWidth={5}\n        strokeWidthSecondary={5}\n      />\n    </LoaderWrap>\n  );\n};\n"],"names":["axios","KEY","fetchTrendingMovies","response","data","results","fetchMoviesByName","name","fetchMovieDetails","movieId","fetchMovieCast","cast","fetchMovieReviews","CastList","styled","CastItem","Image","CastName","Character","NotFound","useParams","useState","setCast","isLoading","setIsloading","useEffect","console","log","fetchMovieCastList","Loader","length","map","character","profile_path","id","src","alt","LoaderWrap","height","width","color","wrapperStyle","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary"],"sourceRoot":""}